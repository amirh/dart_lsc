import 'dart:async';

import 'base_command.dart';
import 'github.dart';

class StepCommand extends BaseLscCommand {

  StepCommand() {
    argParser.addOption(
        requiredOption('update_script'),
        help: 'Required. The command to execute to apply the LSC to the package.');
    argParser.addOption(
        requiredOption('project'),
        help: 'Required. The project number for the LSC tracking project (this is generated by dart_lsc initialize).');

    argParser.addOption(
        ('update_script_args'),
        help: 'Optional. Additional arguments to pass to the update script.');
  }

  @override
  String get description => 'Steps through an LSC';

  @override
  String get name => 'step';

  @override
  FutureOr<int> run() async {
    if (!verifyCommandLineOptions()) {
      return 1;
    }

    List<String> dependentPackagesOf = argResults['dependent_packages_of'];
    final String token = argResults['github_auth_token'];
    final String owner = argResults['tracking_repository_owner'];
    final String repositoryName = argResults['tracking_repository'];
    final String projectNumber = argResults['project'];

    final GitHubClient gitHub = GitHubClient(token);
    final GitHubRepository repository = await gitHub.getRepository(owner, repositoryName);
    final GitHubProject project = await repository.getLscProject(projectNumber);

    await handleTodo(project);
    await handlePrSent(project);
    await handlePrMerged(project);
    await handleNeedManualIntervention(project);
  }

  Future<List<GitHubIssue>> closeIfMigrated(List<GitHubIssue> issues) async {

  }

  void handleTodo(GitHubProject project) async {
    List<GitHubIssue> issues = await project.getColumnIssues('TODO');
    issues = await closeIfMigrated(issues);
  }

  void handlePrSent(GitHubProject project) async {
    List<GitHubIssue> issues = await project.getColumnIssues('PR Sent');
    issues = await closeIfMigrated(issues);
  }

  void handlePrMerged(GitHubProject project) async {
    List<GitHubIssue> issues = await project.getColumnIssues('PR Merged');
    issues = await closeIfMigrated(issues);
  }

  void handleNeedManualIntervention(GitHubProject project) async {
    List<GitHubIssue> issues = await project.getColumnIssues('Need Manual Intervention');
    issues = await closeIfMigrated(issues);
  }
}
